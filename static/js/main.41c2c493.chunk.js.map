{"version":3,"sources":["components/Header.js","components/Footer.js","components/AllNotes.js","components/CurrentNote.js","components/NoteView.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","Footer","NoteItem","_ref","note","handleNoteSelect","id","className","onClick","title","text","lastSaved","AllNotes","_ref2","savedNotes","handleNewNote","noteList","Object","toConsumableArray","values","map","key","type","src","alt","NoSelection","props","EditNote","handleNoteChange","handleSaveNote","handleClearNote","handleDeleteNote","value","onChange","placeholder","CurrentNote","console","log","currentNoteClasses","NoteView","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","Map","notesCreated","selectedNote","bind","assertThisInitialized","handleSelectedNoteChange","handleClearSelectedNote","event","Date","toUTCString","setState","trimmedNote","objectSpread","trim","updatedNote","trimNote","isValidNote","set","alert","delete","selectedId","Number","currentTarget","get","target","components_AllNotes","components_CurrentNote","Component","App","components_Header","components_NoteView","components_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.41c2c493.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Header() {\r\n  return (\r\n    <header><h1>Noted</h1></header>\r\n  );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nfunction Footer() {\r\n  return (\r\n    <footer></footer>\r\n  );\r\n}\r\n\r\nexport default Footer;","import React from 'react';\r\n\r\nfunction NoteItem({ note, handleNoteSelect }) {\r\n  return (\r\n    <li id={note.id} className='saved-note' onClick={handleNoteSelect}>\r\n      <div className='saved-note-title'>{note.title}</div>\r\n      <p className='saved-note-text-snippet'>{note.text}</p>\r\n      <div className='saved-note-date'>{note.lastSaved}</div>\r\n    </li>\r\n  );\r\n}\r\n\r\nfunction AllNotes({ savedNotes, handleNoteSelect, handleNewNote }) {\r\n  const noteList = [...savedNotes.values()].map(note => (\r\n    <NoteItem key={note.id} note={note} handleNoteSelect={handleNoteSelect} /> \r\n  ));\r\n\r\n  return (\r\n    <div className='all-notes'>\r\n      <h2 id='all-notes-title'>All Notes</h2>\r\n      <ul id='saved-notes-list' >{noteList}</ul>\r\n\r\n      <button id='new-note-btn' className='note-opts-btn' type='button' onClick={handleNewNote}>\r\n        <img src='./assets/add-note.svg' alt='create new note'/>\r\n      </button> \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AllNotes;","import React from 'react';\r\n\r\n//* User didn't select a note to display or create a new note\r\nfunction NoSelection(props) {\r\n  return (\r\n    <div className='no-note-selection'>No selection :o</div>\r\n  );\r\n}\r\n\r\n\r\n//* User is either editing a previously saved note or creating a new note \r\nfunction EditNote({ note, handleNoteChange, handleSaveNote, handleClearNote, handleDeleteNote }) {\r\n  return (\r\n    <div className='edit-note'>\r\n      <div id='edit-note-opts-bar' className='note-opts-bar'>\r\n        <button id='edit-note-back-btn' className='note-opts-btn' type='button' onClick={handleClearNote}>\r\n          <img src='./assets/back-arrow.svg' alt='clear selected note button'/>\r\n        </button> \r\n\r\n        <span className='note-opts-bar-container'>\r\n          <button id='edit-note-save-btn' className='note-opts-btn' type='button' onClick={handleSaveNote}>\r\n            <img src='./assets/save-white.svg' alt='save note button'/>\r\n          </button> \r\n\r\n          <button id='edit-note-delete-btn' className='note-opts-btn' type='button' onClick={handleDeleteNote}>\r\n            <img src='./assets/delete-white.svg' alt='save note button'/>\r\n          </button> \r\n        </span>\r\n      </div>\r\n      <input id='edit-note-title' type='text' value={note.title}\r\n              onChange={handleNoteChange} placeholder='Title' />\r\n\r\n      <textarea id='edit-note-text' value={note.text} \r\n                onChange={handleNoteChange} placeholder='Start writing...'>\r\n      </textarea>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n/*\r\n* displays view for editing a note ONLY if user selected \r\n* a previously saved note or to create a new note */\r\nfunction CurrentNote({ note, handleNoteChange, handleSaveNote, handleClearNote, handleDeleteNote }) { \r\n  console.log('CurrentNote rendered');\r\n\r\n  const currentNoteClasses = note ? 'current-note selected' : 'current-note';\r\n\r\n  return (\r\n    <article className={currentNoteClasses}>\r\n      { note ?\r\n        <EditNote note={note} handleNoteChange={handleNoteChange}\r\n                  handleSaveNote={handleSaveNote} handleClearNote={handleClearNote} handleDeleteNote={handleDeleteNote} /> :\r\n        <NoSelection />\r\n      }\r\n    </article>\r\n  );\r\n}\r\n\r\nexport default CurrentNote;","import React, {Component} from 'react';\r\nimport AllNotes from './AllNotes';\r\nimport CurrentNote from './CurrentNote';\r\n\r\nclass NoteView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      savedNotes: new Map(),\r\n      notesCreated: 0, //* total notes created - will differ from savedNotes length if notes were deleted\r\n      selectedNote: null, //* current selected note displayed in EditNote\r\n    };\r\n\r\n\r\n    //*************************************** */\r\n    //*       EVENT HANDLERS \r\n\r\n    //* handler for selecting a note in AllNotes\r\n    this.handleNoteSelect = this.handleNoteSelect.bind(this); \r\n\r\n    //* callback when user modifies the selectedNote in CurrentNote.\r\n    this.handleSelectedNoteChange = this.handleSelectedNoteChange.bind(this);\r\n\r\n    //* callback when user clicks \"new note\" button\r\n    this.handleNewNote = this.handleNewNote.bind(this);\r\n\r\n    //* callback to clear selectedNote - does NOT modify the stored data in savedNotes\r\n    this.handleClearSelectedNote = this.handleClearSelectedNote.bind(this);\r\n\r\n    //* callback to save selectedNote to savedNotes\r\n    this.handleSaveNote = this.handleSaveNote.bind(this);\r\n    \r\n    //* callback to delete selectedNote, removing from savedNotes and clearing currentNote\r\n    this.handleDeleteNote = this.handleDeleteNote.bind(this);\r\n  }\r\n\r\n  //* creates a new \"temporary\" note by only storing it as the selectedNote.\r\n  handleNewNote(event) {\r\n    console.log('new note :D');\r\n    \r\n    //TODO ALL:\r\n    //? ask user to save / discard current note if one is selected and has been modified\r\n    //! REMOVE SAVEDNOTES DATA WHILE TESTING\r\n    //* create new note object and save as selectedNote\r\n    //* if the selectedNote is saved it will need to be added to savedNotes\r\n\r\n    //* setup for new note object\r\n    let notesCreated = this.state.notesCreated; //* id based on number of notes created (not tied to savedNotes.size)\r\n    const selectedNote = {\r\n      id: notesCreated,\r\n      lastSaved: (new Date()).toUTCString(),\r\n      title: '',\r\n      text: ''\r\n    };\r\n\r\n    notesCreated += 1; //* updates number of notes created\r\n    this.setState({ notesCreated, selectedNote }); \r\n  }\r\n\r\n  //* clears the selectedNote but does NOT modify the savedNote data\r\n  handleClearSelectedNote(event) {\r\n    this.setState({ selectedNote: null });\r\n  }\r\n\r\n  //* note is saved if at least the title field isn't empty\r\n  isValidNote(note) {\r\n    return note.title !== '';\r\n  }\r\n\r\n  //* removes the whitespace around the title and text body of the note\r\n  trimNote() {\r\n    const trimmedNote = { ...this.state.selectedNote };\r\n    trimmedNote.title = trimmedNote.title.trim(); //* removes whitespace around title\r\n    trimmedNote.text = trimmedNote.text.trim();   //* removes whitespace around text body\r\n\r\n    return trimmedNote;\r\n  }\r\n\r\n  //* creates / updates selectedNote in savedNotes: the selectedNote data will overwrite\r\n  //* any data from the same note (same id) previously stored in savedNotes.\r\n  handleSaveNote(event) {\r\n    const updatedNote = this.trimNote(); //* returns the selected note with the whitespace around title/text removed\r\n\r\n    if (this.isValidNote(updatedNote)) {\r\n      //* saves the changes from selectedNote into the savedNotes list\r\n      updatedNote.lastSaved = (new Date()).toUTCString(); //* updates save timestamp\r\n      const savedNotes = this.state.savedNotes;\r\n\r\n      //* updates selected note & state\r\n      savedNotes.set(updatedNote.id, updatedNote);\r\n      this.setState({ savedNotes });\r\n    }\r\n\r\n    else {\r\n      alert('COMPUTER SAYS: The note must be filled out to use it...');\r\n    }\r\n  }\r\n\r\n\r\n  handleDeleteNote(event) {\r\n    const savedNotes = this.state.savedNotes;\r\n\r\n    //* a note is seleted that can be removed\r\n    if (this.state.selectedNote) {\r\n      this.state.savedNotes.delete(this.state.selectedNote.id);\r\n\r\n      this.setState({   //* clears selectedNote and updates savedNotes\r\n        savedNotes: savedNotes, \r\n        selectedNote: null\r\n      });\r\n    }\r\n\r\n    //* object to delete doesn't exist\r\n    else {\r\n      alert('COMPUTER SAYS: Nothing selected to remove...');\r\n    }\r\n  }\r\n\r\n\r\n  //* user selected note to display\r\n  handleNoteSelect(event) {\r\n    let selectedId = Number(event.currentTarget.id);\r\n   \r\n    this.setState({\r\n      selectedNote: { ...this.state.savedNotes.get(selectedId) }\r\n    });\r\n  }\r\n\r\n\r\n  //* the selectedNote has been updated\r\n  handleSelectedNoteChange(event) {\r\n    const selectedNote = { ...this.state.selectedNote };\r\n\r\n    switch (event.target.id) {\r\n      case 'edit-note-title': //* selected note title modified\r\n        selectedNote.title = event.target.value;\r\n        break;\r\n\r\n      case 'edit-note-text': //* selected note text modified\r\n        selectedNote.text = event.target.value;\r\n        break;\r\n      \r\n      default:\r\n        console.log('Event mod not supported.');\r\n    }\r\n\r\n    this.setState({ selectedNote });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"note-view\">\r\n        <AllNotes savedNotes={this.state.savedNotes} handleNoteSelect={this.handleNoteSelect}\r\n                  handleNewNote={this.handleNewNote} />\r\n\r\n        <CurrentNote note={this.state.selectedNote} handleNoteChange={this.handleSelectedNoteChange}\r\n                     handleSaveNote={this.handleSaveNote} handleClearNote={this.handleClearSelectedNote}\r\n                     handleDeleteNote={this.handleDeleteNote} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\nexport default NoteView;","import React, { Component } from 'react';\r\nimport Header from './components/Header';\r\nimport Footer from './components/Footer';\r\nimport NoteView from './components/NoteView';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Header />\r\n        <NoteView />\r\n        <Footer />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}